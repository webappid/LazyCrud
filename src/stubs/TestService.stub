<?php
/**
 * Created by LazyCrud - @DyanGalih <dyan.galih@gmail.com>
 */

namespace Tests\Services;

use App\Services\DummyClassService;
use App\Services\Requests\DummyClassServiceRequest;
use Illuminate\Contracts\Container\BindingResolutionException;
use Tests\Unit\Repositories\DummyClassRepositoryTest;
use Tests\SmartTestCase;
use WebAppId\DDD\Tools\Lazy;

/**
 * @author: DummyAuthor
 * Date: DummyDate
 * Time: DummyTime
 * Class DummyClassServiceResponseList
 * @package DummyNamespace
 */
class DummyClassServiceTest extends SmartTestCase
{

    /**
     * @var DummyClassService
     */
    protected $dummyClassService;

    /**
     * @var DummyClassRepositoryTest
     */
    protected $dummyClassRepositoryTest;

    public function __construct($name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        try {
            $this->dummyClassService = $this->container->make(DummyClassService::class);
            $this->dummyClassRepositoryTest = $this->container->make(DummyClassRepositoryTest::class);
        } catch (BindingResolutionException $e) {
            report($e);
        }

    }

    public function testGetById()
    {
        $contentServiceResponse = $this->testStore();
        $dummyClassServiceRequest = $this->getDummy();
        $result = $this->container->call([$this->dummyClassService, 'getById'], ['id' => $contentServiceResponse->dummyClass->id, 'dummyClassServiceRequest' => $dummyClassServiceRequest]);
        self::assertTrue($result->isStatus());
    }

    private function getDummy(int $number = 0): DummyClassServiceRequest
    {
        $dummyClassRepositoryRequest = $this->container->call([$this->dummyClassRepositoryTest, 'getDummy'], ['no' => $number]);
        $dummyClassServiceRequest = null;
        try {
            $dummyClassServiceRequest = $this->container->make(DummyClassServiceRequest::class);
        } catch (BindingResolutionException $e) {
            report($e);
        }
        return Lazy::copy($dummyClassRepositoryRequest, $dummyClassServiceRequest);
    }

    public function testStore(int $number = 0)
    {
        $dummyClassServiceRequest = $this->getDummy($number);
        $result = $this->container->call([$this->dummyClassService, 'store'], ['dummyClassServiceRequest' => $dummyClassServiceRequest]);
        self::assertTrue($result->isStatus());
        return $result;
    }

    public function testGet()
    {
        for ($i=0; $i<$this->getFaker()->numberBetween(10, $this->getFaker()->numberBetween(10, 30)); $i++){
            $this->testStore($i);
        }
        $result = $this->container->call([$this->dummyClassService, 'get']);
        self::assertTrue($result->isStatus());
    }

    public function testUpdate()
    {
        $contentServiceResponse = $this->testStore();
        $dummyClassServiceRequest = $this->getDummy();
        $result = $this->container->call([$this->dummyClassService, 'update'], ['id' => $contentServiceResponse->dummyClass->id, 'dummyClassServiceRequest' => $dummyClassServiceRequest]);
        self::assertNotEquals(null, $result);
    }

    public function testDelete()
    {
        $contentServiceResponse = $this->testStore();
        $result = $this->container->call([$this->dummyClassService, 'delete'], ['id' => $contentServiceResponse->dummyClass->id]);
        self::assertTrue($result);
    }

    public function testGetWhere()
    {
        for ($i = 0; $i < $this->getFaker()->numberBetween(10, $this->getFaker()->numberBetween(10, 30)); $i++) {
            $this->testStore($i);
        }
        $string = 'aiueo';
        $q = $string[$this->getFaker()->numberBetween(0, strlen($string) - 1)];
        $result = $this->container->call([$this->dummyClassService, 'get'], ['q' => $q]);
        self::assertTrue($result->isStatus());
    }

    public function testGetWhereCount()
    {
        for ($i = 0; $i < $this->getFaker()->numberBetween(10, $this->getFaker()->numberBetween(10, 30)); $i++) {
            $this->testStore($i);
        }
        $string = 'aiueo';
        $q = $string[$this->getFaker()->numberBetween(0, strlen($string) - 1)];
        $result = $this->container->call([$this->dummyClassService, 'getCount'], ['q' => $q]);
        self::assertGreaterThanOrEqual(1, $result);
    }
}
