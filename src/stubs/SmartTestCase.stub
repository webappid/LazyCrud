<?php

namespace Tests;

use AuthClass;
use Faker\Factory as Faker;
use Illuminate\Container\Container;
use Illuminate\Support\Facades\Artisan;
use Symfony\Component\HttpKernel\HttpKernelInterface;

class SmartTestCase extends TestCase
{
    /**
     * @var Container
     */
    protected $container;

    public function __construct($name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->container = new Container();
    }

    protected function secure()
    {
        $user = new User;
        $user = $user->find('1');
        if ($user != null) {
            $this->be($user);
        } else {
            dd('please add user with id 1 to run this unit test');
        }
        return $user;
    }

    protected function sendToLog(string $serviceName, string $endpoint, array $data)
    {
        error_log('==========================================================');
        error_log('Service Name : ' . $serviceName);
        error_log('Endpoint : ' . $endpoint);
        error_log('Payload : ' . json_encode($data));
    }

    protected function resultLog(string $result){
        error_log('==========================================================');
        error_log('Sample Result : ' . $result);
        error_log('==========================================================');
    }

    protected function getFaker()
    {
        return Faker::create('id_ID');
    }

    /**
     * @return mixed|HttpKernelInterface
     */
    public function createApplication()
    {
        $app = require __DIR__ . '/../bootstrap/app.php';
        $app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();
        config(['database.default' => 'sqlite']);
        config(['database.connections.sqlite.database' => ':memory:']);
        return $app;
    }

    protected function setUp(): void
    {
        parent::setUp();
        Artisan::call('migrate');
        Artisan::call('db:seed');
        Artisan::call('webappid:user:seed');
    }

    public function tearDown(): void
    {
        Artisan::call('migrate:reset');
        parent::tearDown();
    }
}
